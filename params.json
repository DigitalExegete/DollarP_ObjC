{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"DollarP-ObjC","tagline":"An Objective-C port of the $P gesture recognizer to be used in iOS applications.","body":"# $P Point-Cloud Recognizer for Objective-C\r\n\r\nAn Objective-C port of the $P gesture recognizer to be used in iOS applications.\r\n\r\n![Demo App](https://raw.github.com/fe9lix/DollarP_ObjC/gh-pages-data/images/dollarp-objc-demo-app.png)\r\n\r\n[Github Page](http://fe9lix.github.com/DollarP_ObjC/)\r\n\r\n## What is $P?\r\nFrom the [$P website](http://depts.washington.edu/aimgroup/proj/dollar/pdollar.html):\r\n\r\n> The $P Point-Cloud Recognizer is a 2-D gesture recognizer designed for rapid prototyping of gesture-based user interfaces. In machine learning terms, $P is an instance-based nearest-neighbor classifier with a Euclidean scoring function, i.e., a geometric template matcher. $P is the latest in the dollar family of recognizers that includes $1 for unistrokes and $N for multistrokes. Although about half of $P's code is from $1, unlike both $1 and $N, $P does not represent gestures as ordered series of points (i.e., strokes), but as unordered point-clouds. By representing gestures as point-clouds, $P can handle both unistrokes and multistrokes equivalently and without the combinatoric overhead of $N. When comparing two point-clouds, $P solves the classic assignment problem between two bipartite graphs using an approximation of the Hungarian algorithm. The $P recognizer is distributed under the New BSD License agreement.\r\n\r\nVatavu, R.-D., Anthony, L. and Wobbrock, J.O. (2012). [Gestures as point clouds: A $P recognizer for user interface prototypes](http://faculty.washington.edu/wobbrock/pubs/icmi-12.pdf). Proceedings of the ACM Int'l Conference on Multimodal Interfaces (ICMI '12). Santa Monica, California (October 22-26, 2012). New York: ACM Press, pp. 273-280.\r\n\r\n## How to use\r\nAll gesture recognizer files are located in `libs/DollarP`. Just drag this folder into your Xcode project. See the code of the demo app on how to use the recognizer. \r\n`GestureViewController.m` is the implementation file where a new recognizer is added to the view:\r\n\r\n\r\n```objective-c\r\n- (void)viewDidLoad {\r\n    [super viewDidLoad];\r\n    \r\n    dollarPGestureRecognizer = [[DollarPGestureRecognizer alloc] initWithTarget:self\r\n                                                                       action:@selector(gestureRecognized:)];\r\n\r\n    [gestureView addGestureRecognizer:dollarPGestureRecognizer];\r\n}\r\n```\r\n\r\nIf you want to add the default templates:\r\n```objective-c\r\n[dollarPGestureRecognizer setPointClouds:[DollarDefaultGestures defaultPointClouds]];\r\n```\r\n\r\nWhen a gesture is recognized, a `DollarPResult` object contains the name and score of the gesture:\r\n```objective-c\r\n- (void)gestureRecognized:(DollarPGestureRecognizer *)sender {\r\n    DollarResult *result = [sender result];\r\n    [resultLabel setText:[NSString stringWithFormat:@\"Result: %@ (Score: %.2f)\",\r\n                          [result name], [result score]]];\r\n}\r\n```\r\n\r\nSince the recognizer does not continuously calculate possible gestures, you need to call `recognize` at some point:\r\n```objective-c\r\n[dollarPGestureRecognizer recognize];\r\n```\r\n\r\n(Depending on your needs, you could also extend `DollarPGestureRecognizer` to perform the recognition in the `touchesEnded` delegate method.)\r\n\r\n###Adding your own templates:\r\n\r\n`See CustomizeViewController.m`. You can either add preprocessed templates (`DollarPointCloud`) or add new templates on the fly.\r\nTo add all current points as a gesture:\r\n```objective-c\r\n[gestureRecognizer addGestureWithName:name];\r\n```\r\n\r\n`DollarDefaultGestures.m` shows you how to add a new preprocessed template:\r\n```objective-c\r\nNSArray *points = @[\r\n    [[DollarPoint alloc] initWithId:@1 x:0 y:100],\r\n    [[DollarPoint alloc] initWithId:@1 x:50 y:0],\r\n    [[DollarPoint alloc] initWithId:@2 x:50 y:0],\r\n    [[DollarPoint alloc] initWithId:@2 x:100 y:100]\r\n];\r\nDollarPointCloud *pointCloud = [[DollarPointCloud alloc] initWithName:@\"Roof\" points:points];\r\n[[dollarPGestureRecognizer pointClouds] addObject:pointCloud];\r\n```\r\nThis would add a new gesture called \"Roof\" with two different strokes consisting of two points each as a new preprocessed template.\r\n\r\n###Using DollarP directly:\r\n`DollarPGestureReconizer` is just a \"facade\" for `DollarP`, integrated into iOS gesture recognizers. \r\nHowever, you could also use `DollarP` directly and write your own recognizer on top of it using the methods `addGesture`, `recognize` and the property `pointClouds` from `DollarP.h`.\r\n\r\n## Notes (Demo App):\r\n* You need to add additional templates to improve gesture scores (`Customize/Add to existing type`).\r\n* Custom templates are not persisted between launches!\r\n* Template images on the start screen are displayed from a static image of the $P website and not generated dynamically.","google":""}